import numpy as np
import matplotlib.pyplot as plt
import scipy.fftpack as fft
from scipy import signal
from scipy.signal import butter, filtfilt

Input_1kHz_15kHz =[

+0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065, 
+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663, 
+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585, 
-0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065, 
-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663, 
-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585, 
+0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065, 
+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663, 
+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585, 
+0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065, 
-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663, 
-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585, 
+0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065, 
+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663, 
+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585, 
+0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065, 
-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663, 
-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585, 
-0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065, 
+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663, 
+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585, 
-0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065, 
-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663, 
-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585, 
+0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065, 
+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663, 
+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585, 
+0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065, 
-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663, 
-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585, 
-0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065, 
+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663, 
+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585, 
+0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065, 
-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663, 
-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585, 
-0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065, 
+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663, 
+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585, 
+0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065, 
]

Impulse_response = [
  -0.0018225230, -0.0015879294, +0.0000000000, +0.0036977508, +0.0080754303, +0.0085302217, -0.0000000000, -0.0173976984,
  -0.0341458607, -0.0333591565, +0.0000000000, +0.0676308395, +0.1522061835, +0.2229246956, +0.2504960933, +0.2229246956,
  +0.1522061835, +0.0676308395, +0.0000000000, -0.0333591565, -0.0341458607, -0.0173976984, -0.0000000000, +0.0085302217,
  +0.0080754303, +0.0036977508, +0.0000000000, -0.0015879294, -0.0018225230
]

ECG = [
    0, 0.0010593, 0.0021186, 0.003178, 0.0042373, 0.0052966, 0.0063559,
    0.0074153, 0.0084746, 0.045198, 0.081921, 0.11864, 0.15537, 0.19209,
    0.22881, 0.26554, 0.30226, 0.33898, 0.30226, 0.26554, 0.22881, 0.19209,
    0.15537, 0.11864, 0.081921, 0.045198, 0.0084746, 0.0077684, 0.0070621,
    0.0063559, 0.0056497, 0.0049435, 0.0042373, 0.0035311, 0.0028249,
    0.0021186, 0.0014124, 0.00070621, 0, -0.096045, -0.19209, -0.28814,
    -0.073446, 0.14124, 0.35593, 0.57062, 0.78531, 1, 0.73729, 0.47458,
    0.21186, -0.050847, -0.31356, -0.57627, -0.83898, -0.55932, -0.27966, 0,
    0.00073692, 0.0014738, 0.0022108, 0.0029477, 0.0036846, 0.0044215,
    0.0051584, 0.0058954, 0.0066323, 0.0073692, 0.0081061, 0.008843, 0.00958,
    0.010317, 0.011054, 0.011791, 0.012528, 0.013265, 0.014001, 0.014738,
    0.015475, 0.016212, 0.016949, 0.03484, 0.052731, 0.070621, 0.088512,
    0.1064, 0.12429, 0.14218, 0.16008, 0.17797, 0.16186, 0.14576, 0.12966,
    0.11356, 0.097458, 0.081356, 0.065254, 0.049153, 0.033051, 0.016949,
    0.013559, 0.010169, 0.0067797, 0.0033898, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0010593, 0.0021186, 0.003178,
    0.0042373, 0.0052966, 0.0063559, 0.0074153, 0.0084746, 0.045198, 0.081921,
    0.11864, 0.15537, 0.19209, 0.22881, 0.26554, 0.30226, 0.33898, 0.30226,
    0.26554, 0.22881, 0.19209, 0.15537, 0.11864, 0.081921, 0.045198, 0.0084746,
    0.0077684, 0.0070621, 0.0063559, 0.0056497, 0.0049435, 0.0042373,
    0.0035311, 0.0028249, 0.0021186, 0.0014124, 0.00070621, 0, -0.096045,
    -0.19209, -0.28814, -0.073446, 0.14124, 0.35593, 0.57062, 0.78531, 1,
    0.73729, 0.47458, 0.21186, -0.050847, -0.31356, -0.57627, -0.83898,
    -0.55932, -0.27966, 0, 0.00073692, 0.0014738, 0.0022108, 0.0029477,
    0.0036846, 0.0044215, 0.0051584, 0.0058954, 0.0066323, 0.0073692,
    0.0081061, 0.008843, 0.00958, 0.010317, 0.011054, 0.011791, 0.012528,
    0.013265, 0.014001, 0.014738, 0.015475, 0.016212, 0.016949, 0.03484,
    0.052731, 0.070621, 0.088512, 0.1064, 0.12429, 0.14218, 0.16008, 0.17797,
    0.16186, 0.14576, 0.12966, 0.11356, 0.097458, 0.081356, 0.065254, 0.049153,
    0.033051, 0.016949, 0.013559, 0.010169, 0.0067797, 0.0033898, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0010593,
    0.0021186, 0.003178, 0.0042373, 0.0052966, 0.0063559, 0.0074153, 0.0084746,
    0.045198, 0.081921, 0.11864, 0.15537, 0.19209, 0.22881, 0.26554, 0.30226,
    0.33898, 0.30226, 0.26554, 0.22881, 0.19209, 0.15537, 0.11864, 0.081921,
    0.045198, 0.0084746, 0.0077684, 0.0070621, 0.0063559, 0.0056497, 0.0049435,
    0.0042373, 0.0035311, 0.0028249, 0.0021186, 0.0014124, 0.00070621, 0,
    -0.096045, -0.19209, -0.28814, -0.073446, 0.14124, 0.35593, 0.57062,
    0.78531, 1, 0.73729, 0.47458, 0.21186, -0.050847, -0.31356, -0.57627,
    -0.83898, -0.55932, -0.27966, 0, 0.00073692, 0.0014738, 0.0022108,
    0.0029477, 0.0036846, 0.0044215, 0.0051584, 0.0058954, 0.0066323,
    0.0073692, 0.0081061, 0.008843, 0.00958, 0.010317, 0.011054, 0.011791,
    0.012528, 0.013265, 0.014001, 0.014738, 0.015475, 0.016212, 0.016949,
    0.03484, 0.052731, 0.070621, 0.088512, 0.1064, 0.12429, 0.14218, 0.16008,
    0.17797, 0.16186, 0.14576, 0.12966, 0.11356, 0.097458, 0.081356, 0.065254,
    0.049153, 0.033051, 0.016949, 0.013559, 0.010169, 0.0067797, 0.0033898, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0.0010593, 0.0021186, 0.003178, 0.0042373, 0.0052966, 0.0063559, 0.0074153,
    0.0084746, 0.045198, 0.081921, 0.11864, 0.15537, 0.19209, 0.22881, 0.26554,
    0.30226, 0.33898, 0.30226, 0.26554, 0.22881, 0.19209, 0.15537, 0.11864,
    0.081921, 0.045198, 0.0084746, 0.0077684, 0.0070621, 0.0063559, 0.0056497,
    0.0049435, 0.0042373, 0.0035311, 0.0028249, 0.0021186, 0.0014124,
    0.00070621, 0, -0.096045, -0.19209, -0.28814, -0.073446, 0.14124, 0.35593,
    0.57062, 0.78531, 1, 0.73729, 0.47458, 0.21186, -0.050847, -0.31356,
    -0.57627, -0.83898, -0.55932, -0.27966, 0, 0.00073692, 0.0014738,
    0.0022108, 0.0029477, 0.0036846, 0.0044215, 0.0051584, 0.0058954,
    0.0066323, 0.0073692, 0.0081061, 0.008843, 0.00958, 0.010317, 0.011054,
    0.011791, 0.012528, 0.013265, 0.014001, 0.014738, 0.015475, 0.016212,
    0.016949, 0.03484, 0.052731, 0.070621, 0.088512, 0.1064, 0.12429, 0.14218,
    0.16008, 0.17797, 0.16186, 0.14576, 0.12966, 0.11356, 0.097458, 0.081356,
    0.065254, 0.049153, 0.033051, 0.016949, 0.013559, 0.010169, 0.0067797,
    0.0033898, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0.0010593, 0.0021186, 0.003178, 0.0042373, 0.0052966,
    0.0063559, 0.0074153, 0.0084746, 0.045198, 0.081921, 0.11864, 0.15537,
    0.19209, 0.22881, 0.26554, 0.30226, 0.33898, 0.30226, 0.26554, 0.22881,
    0.19209, 0.15537, 0.11864, 0.081921, 0.045198, 0.0084746, 0.0077684,
    0.0070621, 0.0063559, 0.0056497, 0.0049435, 0.0042373, 0.0035311,
    0.0028249, 0.0021186, 0.0014124, 0.00070621, 0, -0.096045, -0.19209,
    -0.28814, -0.073446, 0.14124, 0.35593, 0.57062, 0.78531, 1, 0.73729,
    0.47458, 0.21186, -0.050847, -0.31356, -0.57627, -0.83898, -0.55932,
    -0.27966, 0, 0.00073692, 0.0014738, 0.0022108, 0.0029477, 0.0036846,
    0.0044215, 0.0051584, 0.0058954, 0.0066323, 0.0073692, 0.0081061, 0.008843,
    0.00958, 0.010317, 0.011054, 0.011791, 0.012528, 0.013265, 0.014001,
    0.014738, 0.015475, 0.016212, 0.016949, 0.03484, 0.052731, 0.070621,
    0.088512, 0.1064, 0.12429, 0.14218, 0.16008, 0.17797, 0.16186, 0.14576,
    0.12966, 0.11356, 0.097458, 0.081356, 0.065254, 0.049153, 0.033051,
    0.016949, 0.013559, 0.010169, 0.0067797, 0.0033898, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

# Perform high-pass filtering
cutoff_freq = 10.0  # Define the cutoff frequency (adjust as needed)
sampling_freq = 1000.0  # Define the sampling frequency (adjust as needed)
normalized_cutoff_freq = cutoff_freq / (sampling_freq / 2)

# Convert to frequency domain
Impulse_response_freq = np.fft.fft(Impulse_response)

# Apply high-pass filter
b, a = signal.butter(4, normalized_cutoff_freq, btype='high', analog=False)
filtered_response_freq = signal.lfilter(b, a, Impulse_response_freq)

# Convert back to time domain
filtered_response = np.fft.ifft(filtered_response_freq).real

# Plotting real, imaginary, magnitude, and phase of the output frequency domain
def plot_low_freq():
    plt.figure(figsize=(10, 5)) 
    plt.subplot(2, 1, 1)
    plt.plot(Impulse_response)
    plt.title('Original Impulse Response')
    plt.subplot(2, 1, 2)
    plt.plot(filtered_response)
    plt.title('Modified Impulse Response (High-pass Filtered)')
    plt.tight_layout()
    plt.show()

#==============================================================================
def analyze_frequency(ECG):
    # Compute the one-dimensional discrete Fourier Transform
    frequency_spectrum = np.fft.fft(ECG)

    # Determine the number of samples
    num_samples = len(ECG)

    # Create a frequency axis for plotting
    frequencies = np.fft.fftfreq(num_samples)

    # Plot the frequency spectrum
    plt.figure()
    plt.plot(frequencies, np.abs(frequency_spectrum))
    plt.xlabel('Frequency (arb. units)')
    plt.ylabel('Magnitude')
    plt.title('Frequency Spectrum')
    plt.show()
#==============================================================================
def apply_lowpass_filter(ecg_signal, cutoff_freq, fs):
    # Normalize the cutoff frequency
    normalized_cutoff_freq = cutoff_freq / (0.5 * fs)

    # Design a Butterworth low-pass filter
    b, a = butter(5, normalized_cutoff_freq, btype='low', analog=False, output='ba')

    # Apply the filter to the ECG signal
    filtered_signal = filtfilt(b, a, ecg_signal)

    return filtered_signal


# Apply the low-pass filter
filtered_ecg = apply_lowpass_filter(ECG,100,300)

def plot_filtered_signal():
    # Plot the original and filtered signals
    plt.figure()
    plt.plot(ECG, label='Original ECG')
    plt.plot(filtered_ecg, label='Filtered ECG')
    plt.xlabel('Time')
    plt.ylabel('Amplitude')
    plt.title('ECG Signal')
    plt.legend()
    plt.show()
#==============================================================================

# Generate white noise with the same length as the ECG signal
noise = np.random.normal(0, 0.1, len(ECG))

# Add the noise to the ECG signal
noisy_ecg = ECG + noise

# Design a lowpass filter
cutoff_freq = 100  # Adjust the cutoff frequency as needed
order = 4  # Adjust the filter order as needed
nyquist_freq = 0.5 * 300  # 300 Hz is the sampling rate
normal_cutoff = cutoff_freq / nyquist_freq
b, a = signal.butter(order, normal_cutoff, btype='low', analog=False)

# Apply the lowpass filter to remove the noise
filtered_ecg = signal.filtfilt(b, a, noisy_ecg)

def plot_noisy_signal():
    # Plot the noisy and filtered signals
    plt.figure(figsize=(12, 6))
    plt.subplot(3, 1, 1)
    plt.plot(ECG)
    plt.title('Original ECG Signal')

    plt.subplot(3, 1, 2)
    plt.plot(noisy_ecg)
    plt.title('Noisy ECG Signal')

    plt.subplot(3, 1, 3)
    plt.plot(filtered_ecg)
    plt.title('Filtered ECG Signal')

    plt.tight_layout()
    plt.show()


#==============================================================================
def signals_init():
    while True:
        print("1 - plot impulse response")
        print("2 - analyze frequency")
        print("3 - plot filtered signal")
        print("4 - plot noisy signal")
        print("5 - exit")

        choice = int(input("choice: "))
        match choice:
            case 1:
                plot_low_freq()
            case 2:
                analyze_frequency(ECG)
            case 3:
                plot_filtered_signal()
            case 4:
                plot_noisy_signal()
            case 5:
                exit()
            case _:
                print("invalid choice!")


if __name__ == "__main__":
    signals_init()
